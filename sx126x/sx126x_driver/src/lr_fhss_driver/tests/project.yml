---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
#  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :default_tasks:
    - test:all

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment:

:extension:
  :executable: .out

:paths:
  :test:
    - ../tests/**
  :source:
    - ../src/**

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines []
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST
    - TEST_PP

:test_runner:
  :includes:
  :use_param_tests: true

:unity:
  :use_param_tests: true

:cmock:
  :verbosity: 3
  :callback_after_arg_check: TRUE
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
    - :array
    - :return_thru_ptr
    - :ignore_arg
  # :when_ptr: :smart
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8
  :use_param_tests: true
  :treat_externs: :include  # Now the extern-ed functions will be mocked.
  :includes:
    - <stdbool.h>
    - <stdio.h>
    - <stdlib.h>

:gcov:
  :html_report: true
  :html_report_type: detailed
  :exclude:
    - ../_tests/**
  :xml_report: false

#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use
:tools:
  :gcov_fixture:
    :executable: ${1}
  :gcov_report:
    :executable: gcov
    :arguments:
      - -n
      - -p
      - -b
      - -o "$": GCOV_BUILD_OUTPUT_PATH
      - "\"${1}\""
  :gcov_post_report:
    :executable: gcovr
    :optional: TRUE
    :arguments:
        - -p
        - -b
        - -e "${1}"
        - --html
        - -r .
        - -o GcovCoverageResults.html
  :gcov_post_report_basic:
    :executable: gcovr
    :optional: TRUE
    :arguments:
        - -p
        - -b
        - -e "${1}"
        - --html
        - -r .
        - -o  "$": GCOV_ARTIFACTS_FILE
  :gcov_post_report_advanced:
    :executable: gcovr
    :optional: TRUE
    :arguments:
        - -p
        - -b
        - -e "^vendor.*|^build.*|^test.*|^lib.*"
        - --html
        - --html-details
        - -r .
        - -o  "$": GCOV_ARTIFACTS_FILE

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "${1}"  # or "-L ${1}" for example
  :common: &common_libraries []
  :test:
    - *common_libraries
    - -lm
  :release:
    - *common_libraries
    - -lm

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - raw_output_report
    - xml_tests_report
    - gcov
